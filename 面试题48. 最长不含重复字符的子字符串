面试题48. 最长不含重复字符的子字符串
请从字符串中找出一个最长的不包含重复字符的子字符串，计算该最长子字符串的长度。
输入: "abcabcbb" 存在abc下一个字符a重复，则为bca，删除前一个而不是删除整个数组，重新开始为abc
> 输出: 3   【解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。】
//1.O(N^3)，dp数组存储子串
int lengthOfLongestSubstring1(string s) 
{
	if(s.size()==0)
		return 0;

	vector<char> dp(s.size(),'#');
	int index=0;//数组下标
	dp[index]=s[0];
	int max=1;//保存最长子串个数
	for(int i=1;i<s.size();i++)
	{
		int j=index;//数组最后一个元素的下标
		while(j>=0)//和数组中的元素比较，看是否有重复的
		{
			if(s[i]!=dp[j])
			{
				j--;
				continue;
			}
			else//存在重复，如果重复的数值是数组最后一位，那么数组从头开始存，否则删除重复下标前的数据即可，数组继续从后存储
			{
				if(j==index)//和数组最后一位重复，数组重新存储
				{
					max=(index+1)>max?(index+1):max;//index是下标，从0开始
					index=-1;//确保每次数组从0开始存储,下面存储时index++,为0
				}
				else//不是最后一位
				{
					max=(index+1)>max?(index+1):max;
					for(int k=0;k+j+1<=index;k++)
					{
						dp[k]=dp[k+j+1];//删除0~j之间的元素即假如j=1,那么dp[0]=dp[2],dp[1]=dp[3]
					}
					index-=(j+1);
				}
				break;
			}
		}
		index++;//数组下标++
		dp[index]=s[i];
	}
	max=(index+1)>max?(index+1):max;//需要判断最后一次的子串是否是最长的
	return max;
}
//dp数组存储i位置最长子串的数字，
int lengthOfLongestSubstring2(string s)
{
	if(s.size()==0)
		return 0;
	vector<int> dp(s.size(),0);//dp[i]表示i位置的最长字符
	dp[0]=1;//初始化0号下标，此时一个元素
	int max=1;//保存最长
	bool flag=true;//标志是否有重复元素
	for(int i=1;i<s.size();i++)
	{
		flag=true;//每一次开始初始化一下
		for(int j=i-1;j>=0;j--)//从后往前找是否有重复元素
		{
			if(s[j]==s[i])//存在重复元素
			{
				flag=false;
				//判断这个元素是否在最长的子串范围，如abcbcfgha,h下标的最长子串为5，a的重复元素为0，当前为8，8-0>5表示不在范围内，那么dp[i]=dp[i-1]+1
				//否则存在，如abca,c最长子串为3，a当前元素为3，重复元素为0，3-0==3,所以包含，那么应该去除重复元素，dp[i]=i-j
				if(i-j<=dp[i-1])//重复元素在最长子串中
				{
					dp[i]=i-j;
					max=dp[i]>max?dp[i]:max;
				}
				else//虽然重复，但没有在最长子串中
				{
					dp[i]=dp[i-1]+1;
					max=dp[i]>max?dp[i]:max;
				}
				break;
			}
		}
		//没有重复，则直接+1即可
		if(flag)
		{
			dp[i]=dp[i-1]+1;
			max=dp[i]>max?dp[i]:max;

		}
	}
	return max;
}
//3.双指针O(N^2)尾扩展窗口，头缩小窗口
int lengthOfLongestSubstring3(string s)
{
	if(s.size()==0)
		return 0;
	int head=0,tail=0;
	bool flag=true;//标志是否有重复元素
	int max=1;//保存最长
	for(int i=1;i<s.size();i++)
	{
		flag=true;//每一次开始初始化一下
		for(int j=head;j<=tail;j++)//判断窗口中是否有重复的
		{
			if(s[j]==s[i])
			{
				flag=false;
				tail+=1;//移动窗口
				head=j+1;//把窗口缩小，直到窗口内不包含重复元素，
				max=(tail-head+1)>max?(tail-head+1):max;//1-0为1，包含0，1两个元素
				break;
			}
		}
		if(flag)//没有重复元素，窗口扩大
		{
			tail+=1;
			max=(tail-head+1)>max?(tail-head+1):max;
		}
	}
	return max;
}
//4.引入哈希表，上面双指针我们的时间复杂度，第一次for是遍历，第二次是判断重复，那么我们可以引入哈希，直接得到重复数组的下标，对滑动窗口的值，进行改变
int lengthOfLongestSubstring4(string s)
{
	if(s.size()==0)
		return 0;
	unordered_map<char,int> hash;
	int left=0;
	int res=0;
	for(int right=0;right<s.size();right++)
	{
		if(hash.find(s[right])!=hash.end())//在哈希表中查找元素，找到重复的了,则应该跳过重复的
		{
			left=max(left,hash[s[right]]+1);
		}
		hash[s[right]]=right;//更新数据最后一次出现的位置
		res=max(right-left+1,res);//1-0为1，包含0，1两个元素
	}
	return res;
}
//5.用数组
//也可以用数组，128大小，可以表示所有字符，数组下标表示元素，数组中存储元素出现的最后位置,因为一共有127个字符，所以直接开辟128长度的数组即可。首先把每个字符的对应值设为 -1
int lengthOfLongestSubstring(string s)
{
	if(s.size()==0)
		return 0;
	vector<int>a(128,-1);
	int res=0,left=0;
	for(int right=0;right<s.size();right++)
	{
		if(a[s[right]]!=-1)//表示已经存在一个元素了，所以重复
		{
			left=max(a[s[right]]+1,left);
		}
		a[s[right]]=right;
		res=max(right-left+1,res);
	}
	return res;
}
int main()
{
	string s="dvdf";
	cout<<lengthOfLongestSubstring(s); 
}
